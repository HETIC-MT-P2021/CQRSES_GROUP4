// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/database/elasticsearch/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	database "github.com/HETIC-MT-P2021/CQRSES_GROUP4/pkg/database"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateIndexIfNotExists mocks base method.
func (m *MockRepository) CreateIndexIfNotExists(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIndexIfNotExists", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIndexIfNotExists indicates an expected call of CreateIndexIfNotExists.
func (mr *MockRepositoryMockRecorder) CreateIndexIfNotExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIndexIfNotExists", reflect.TypeOf((*MockRepository)(nil).CreateIndexIfNotExists), arg0)
}

// GetReadmodel mocks base method.
func (m *MockRepository) GetReadmodel(arg0 string) (database.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadmodel", arg0)
	ret0, _ := ret[0].(database.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReadmodel indicates an expected call of GetReadmodel.
func (mr *MockRepositoryMockRecorder) GetReadmodel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadmodel", reflect.TypeOf((*MockRepository)(nil).GetReadmodel), arg0)
}

// IsClientReady mocks base method.
func (m *MockRepository) IsClientReady(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClientReady", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsClientReady indicates an expected call of IsClientReady.
func (mr *MockRepositoryMockRecorder) IsClientReady(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClientReady", reflect.TypeOf((*MockRepository)(nil).IsClientReady), arg0)
}

// LoadEvents mocks base method.
func (m *MockRepository) LoadEvents(arg0 string) ([]database.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEvents", arg0)
	ret0, _ := ret[0].([]database.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadEvents indicates an expected call of LoadEvents.
func (mr *MockRepositoryMockRecorder) LoadEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEvents", reflect.TypeOf((*MockRepository)(nil).LoadEvents), arg0)
}

// SetUpIndexes mocks base method.
func (m *MockRepository) SetUpIndexes() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpIndexes")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpIndexes indicates an expected call of SetUpIndexes.
func (mr *MockRepositoryMockRecorder) SetUpIndexes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpIndexes", reflect.TypeOf((*MockRepository)(nil).SetUpIndexes))
}

// StoreEvent mocks base method.
func (m *MockRepository) StoreEvent(event database.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreEvent indicates an expected call of StoreEvent.
func (mr *MockRepositoryMockRecorder) StoreEvent(event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreEvent", reflect.TypeOf((*MockRepository)(nil).StoreEvent), event)
}

// StoreReadmodel mocks base method.
func (m *MockRepository) StoreReadmodel(arg0 database.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreReadmodel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreReadmodel indicates an expected call of StoreReadmodel.
func (mr *MockRepositoryMockRecorder) StoreReadmodel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreReadmodel", reflect.TypeOf((*MockRepository)(nil).StoreReadmodel), arg0)
}

// UpdateReadmodel mocks base method.
func (m *MockRepository) UpdateReadmodel(arg0 string, arg1 database.Article) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReadmodel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReadmodel indicates an expected call of UpdateReadmodel.
func (mr *MockRepositoryMockRecorder) UpdateReadmodel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReadmodel", reflect.TypeOf((*MockRepository)(nil).UpdateReadmodel), arg0, arg1)
}
