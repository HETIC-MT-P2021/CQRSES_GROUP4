// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rabbit/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	event "github.com/HETIC-MT-P2021/CQRSES_GROUP4/event"
	gomock "github.com/golang/mock/gomock"
)

// MockRabbitRepository is a mock of RabbitRepository interface.
type MockRabbitRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitRepositoryMockRecorder
}

// MockRabbitRepositoryMockRecorder is the mock recorder for MockRabbitRepository.
type MockRabbitRepositoryMockRecorder struct {
	mock *MockRabbitRepository
}

// NewMockRabbitRepository creates a new mock instance.
func NewMockRabbitRepository(ctrl *gomock.Controller) *MockRabbitRepository {
	mock := &MockRabbitRepository{ctrl: ctrl}
	mock.recorder = &MockRabbitRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitRepository) EXPECT() *MockRabbitRepositoryMockRecorder {
	return m.recorder
}

// Consume mocks base method.
func (m *MockRabbitRepository) Consume(arg0 *event.EventBus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Consume", arg0)
}

// Consume indicates an expected call of Consume.
func (mr *MockRabbitRepositoryMockRecorder) Consume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockRabbitRepository)(nil).Consume), arg0)
}

// Publish mocks base method.
func (m *MockRabbitRepository) Publish(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockRabbitRepositoryMockRecorder) Publish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockRabbitRepository)(nil).Publish), arg0)
}

// QueueConnector mocks base method.
func (m *MockRabbitRepository) QueueConnector(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueConnector", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// QueueConnector indicates an expected call of QueueConnector.
func (mr *MockRabbitRepositoryMockRecorder) QueueConnector(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueConnector", reflect.TypeOf((*MockRabbitRepository)(nil).QueueConnector), arg0)
}
