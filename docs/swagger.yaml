basePath: /api/v1
definitions:
  article.Request:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  auth.requestLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  auth.requestRegister:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  database.Article:
    properties:
      aggregate_article_id:
        type: string
      description:
        type: string
      title:
        type: string
    type: object
  pkg.HTTPError:
    properties:
      message:
        type: string
      status:
        type: integer
    type: object
  pkg.HTTPStatus:
    properties:
      status:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: HETIC-MT5
  description: This is the api documentation for the CQRS Event sourcing implementation
    for HETIC
  license:
    name: MIT
  title: CQRS Event sourcing  documentation API
  version: "1.0"
paths:
  /articles:
    get:
      consumes:
      - application/json
      description: Get an array of article struct
      produces:
      - application/json
      responses:
        "200":
          description: GET /articles
          schema:
            type: string
      summary: Get all articles from elastic search
      tags:
      - articles
    post:
      consumes:
      - application/json
      parameters:
      - description: Add article
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/article.Request'
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/pkg.HTTPStatus'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.HTTPError'
      summary: Create article in elastic search
      tags:
      - articles
  /articles/{aggregate_article_id}:
    get:
      consumes:
      - application/json
      description: Get article struct
      parameters:
      - description: Article ID
        in: path
        name: aggregate_article_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/database.Article'
        "404":
          description: Article Not found
          schema:
            $ref: '#/definitions/pkg.HTTPError'
      summary: Get an article from elastic search
      tags:
      - articles
  /articles/{aggregate_article_id}}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Article ID
        in: path
        name: aggregate_article_id
        required: true
        type: integer
      - description: Update article
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/article.Request'
      produces:
      - application/json
      responses:
        "201":
          description: updated
          schema:
            $ref: '#/definitions/pkg.HTTPStatus'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/pkg.HTTPError'
      summary: Update article in elastic search
      tags:
      - articles
  /fixtures/event-store:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.HTTPStatus'
        "500":
          description: Not Created
          schema:
            $ref: '#/definitions/pkg.HTTPStatus'
      summary: Create event in elastic search
      tags:
      - fixtures
  /fixtures/read-model:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/pkg.HTTPStatus'
        "500":
          description: Not Created
          schema:
            $ref: '#/definitions/pkg.HTTPStatus'
      summary: Create read-model in elastic search
      tags:
      - fixtures
  /login:
    post:
      consumes:
      - application/json
      description: Using JWT auth (look headers for token)
      parameters:
      - description: Account to login
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.requestLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Empty
          schema:
            type: string
        "500":
          description: Error
          schema:
            $ref: '#/definitions/pkg.HTTPError'
      summary: Connect user to app
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Using JWT auth
      parameters:
      - description: Add account
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/auth.requestRegister'
      produces:
      - application/json
      responses:
        "200":
          description: Status
          schema:
            $ref: '#/definitions/pkg.HTTPStatus'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/pkg.HTTPError'
      summary: Create new account
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
x-extension-openapi:
  example: value on a json format
